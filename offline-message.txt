#include <iostream>
#include <vector>
#include <string>
#include <algorithm> // For std::remove_if

// Represents a Book in the library
class Book {
public:
    std::string title;
    std::string author;
    std::string isbn;
    bool isBorrowed;

    Book(std::string t, std::string a, std::string i) :
        title(t), author(a), isbn(i), isBorrowed(false) {}

    void display() const {
        std::cout << "Title: " << title << ", Author: " << author
                  << ", ISBN: " << isbn << ", Borrowed: " << (isBorrowed ? "Yes" : "No") << std::endl;
    }
};

// Represents a Library Member
class Member {
public:
    std::string name;
    int memberId;
    std::vector<std::string> borrowedBooksISBNs; // Stores ISBNs of borrowed books

    Member(std::string n, int id) : name(n), memberId(id) {}

    void display() const {
        std::cout << "Member Name: " << name << ", ID: " << memberId << std::endl;
        if (!borrowedBooksISBNs.empty()) {
            std::cout << "  Borrowed Books (ISBNs): ";
            for (const auto& isbn : borrowedBooksISBNs) {
                std::cout << isbn << " ";
            }
            std::cout << std::endl;
        } else {
            std::cout << "  No books currently borrowed." << std::endl;
        }
    }
};

// Manages the Library operations
class Library {
public:
    std::vector<Book> books;
    std::vector<Member> members;
    int nextMemberId;

    Library() : nextMemberId(1) {}

    void addBook(const std::string& title, const std::string& author, const std::string& isbn) {
        books.emplace_back(title, author, isbn);
        std::cout << "Book '" << title << "' added to the library." << std::endl;
    }

    void addMember(const std::string& name) {
        members.emplace_back(name, nextMemberId++);
        std::cout << "Member '" << name << "' added with ID: " << members.back().memberId << std::endl;
    }

    void borrowBook(int memberId, const std::string& isbn) {
        // Find member
        Member* foundMember = nullptr;
        for (auto& m : members) {
            if (m.memberId == memberId) {
                foundMember = &m;
                break;
            }
        }

        if (!foundMember) {
            std::cout << "Error: Member with ID " << memberId << " not found." << std::endl;
            return;
        }

        // Find book
        Book* foundBook = nullptr;
        for (auto& b : books) {
            if (b.isbn == isbn) {
                foundBook = &b;
                break;
            }
        }

        if (!foundBook) {
            std::cout << "Error: Book with ISBN " << isbn << " not found." << std::endl;
            return;
        }

        if (foundBook->isBorrowed) {
            std::cout << "Error: Book '" << foundBook->title << "' is already borrowed." << std::endl;
            return;
        }

        foundBook->isBorrowed = true;
        foundMember->borrowedBooksISBNs.push_back(isbn);
        std::cout << "Book '" << foundBook->title << "' borrowed by " << foundMember->name << "." << std::endl;
    }

    void returnBook(int memberId, const std::string& isbn) {
        // Find member
        Member* foundMember = nullptr;
        for (auto& m : members) {
            if (m.memberId == memberId) {
                foundMember = &m;
                break;
            }
        }

        if (!foundMember) {
            std::cout << "Error: Member with ID " << memberId << " not found." << std::endl;
            return;
        }

        // Find book
        Book* foundBook = nullptr;
        for (auto& b : books) {
            if (b.isbn == isbn) {
                foundBook = &b;
                break;
            }
        }

        if (!foundBook) {
            std::cout << "Error: Book with ISBN " << isbn << " not found." << std::endl;
            return;
        }

        if (!foundBook->isBorrowed) {
            std::cout << "Error: Book '" << foundBook->title << "' was not borrowed." << std::endl;
            return;
        }

        // Remove ISBN from member's borrowed list
        foundMember->borrowedBooksISBNs.erase(
            std::remove_if(foundMember->borrowedBooksISBNs.begin(), foundMember->borrowedBooksISBNs.end(),
                           [&](const std::string& s) { return s == isbn; }),
            foundMember->borrowedBooksISBNs.end());

        foundBook->isBorrowed = false;
        std::cout << "Book '" << foundBook->title << "' returned by " << foundMember->name << "." << std::endl;
    }

    void displayAllBooks() const {
        std::cout << "\n--- All Books in Library ---" << std::endl;
        if (books.empty()) {
            std::cout << "No books in the library." << std::endl;
            return;
        }
        for (const auto& book : books) {
            book.display();
        }
    }

    void displayAllMembers() const {
        std::cout << "\n--- All Library Members ---" << std::endl;
        if (members.empty()) {
            std::cout << "No members registered." << std::endl;
            return;
        }
        for (const auto& member : members) {
            member.display();
        }
    }
};

int main() {
    Library myLibrary;

    // Add some books
    myLibrary.addBook("The Great Gatsby", "F. Scott Fitzgerald", "978-0743273565");
    myLibrary.addBook("1984", "George Orwell", "978-0451524935");
    myLibrary.addBook("To Kill a Mockingbird", "Harper Lee", "978-0061120084");

    // Add some members
    myLibrary.addMember("Alice Smith");
    myLibrary.addMember("Bob Johnson");

    myLibrary.displayAllBooks();
    myLibrary.displayAllMembers();

    // Borrow some books
    myLibrary.borrowBook(1, "978-0743273565"); // Alice borrows The Great Gatsby
    myLibrary.borrowBook(2, "978-0451524935"); // Bob borrows 1984
    myLibrary.borrowBook(1, "978-0061120084"); // Alice borrows To Kill a Mockingbird

    myLibrary.displayAllBooks();
    myLibrary.displayAllMembers();

    // Try to borrow an already borrowed book
    myLibrary.borrowBook(2, "978-0743273565");

    // Return a book
    myLibrary.returnBook(1, "978-0743273565"); // Alice returns The Great Gatsby

    myLibrary.displayAllBooks();
    myLibrary.displayAllMembers();

    return 0;
}
**********************************
import json

class Contact:
    """Represents a single contact with name, phone, and email."""
    def __init__(self, name, phone, email):
        self.name = name
        self.phone = phone
        self.email = email

    def display_contact(self):
        """Prints the contact's details."""
        print(f"Name: {self.name}, Phone: {self.phone}, Email: {self.email}")

    def to_dict(self):
        """Converts the contact object to a dictionary."""
        return {"name": self.name, "phone": self.phone, "email": self.email}

class ContactManager:
    """Manages a collection of contacts."""
    def __init__(self, filename="contacts.json"):
        self.filename = filename
        self.contacts = self._load_contacts()

    def _load_contacts(self):
        """Loads contacts from a JSON file."""
        try:
            with open(self.filename, 'r') as f:
                data = json.load(f)
                return [Contact(**c) for c in data]
        except FileNotFoundError:
            return []
        except json.JSONDecodeError:
            print("Warning: Corrupted contacts file. Starting with empty contacts.")
            return []

    def _save_contacts(self):
        """Saves contacts to a JSON file."""
        with open(self.filename, 'w') as f:
            json.dump([c.to_dict() for c in self.contacts], f, indent=4)

    def add_contact(self, name, phone, email):
        """Adds a new contact to the manager."""
        new_contact = Contact(name, phone, email)
        self.contacts.append(new_contact)
        self._save_contacts()
        print(f"Contact '{name}' added successfully.")

    def view_contacts(self):
        """Displays all contacts in the manager."""
        if not self.contacts:
            print("No contacts available.")
            return
        for i, contact in enumerate(self.contacts):
            print(f"--- Contact {i+1} ---")
            contact.display_contact()

    def find_contact(self, search_term):
        """Finds contacts by name or email."""
        found_contacts = [c for c in self.contacts if search_term.lower() in c.name.lower() or search_term.lower() in c.email.lower()]
        if not found_contacts:
            print(f"No contacts found matching '{search_term}'.")
            return
        print(f"Found {len(found_contacts)} contact(s) matching '{search_term}':")
        for contact in found_contacts:
            contact.display_contact()

    def delete_contact(self, name):
        """Deletes a contact by name."""
        initial_count = len(self.contacts)
        self.contacts = [c for c in self.contacts if c.name.lower() != name.lower()]
        if len(self.contacts) < initial_count:
            self._save_contacts()
            print(f"Contact '{name}' deleted successfully.")
        else:
            print(f"Contact '{name}' not found.")

def main():
    """Main function to run the contact management system."""
    manager = ContactManager()

    while True:
        print("\n--- Contact Manager Menu ---")
        print("1. Add Contact")
        print("2. View Contacts")
        print("3. Find Contact")
        print("4. Delete Contact")
        print("5. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            name = input("Enter name: ")
            phone = input("Enter phone: ")
            email = input("Enter email: ")
            manager.add_contact(name, phone, email)
        elif choice == '2':
            manager.view_contacts()
        elif choice == '3':
            search_term = input("Enter name or email to search: ")
            manager.find_contact(search_term)
        elif choice == '4':
            name_to_delete = input("Enter name of contact to delete: ")
            manager.delete_contact(name_to_delete)
        elif choice == '5':
            print("Exiting Contact Manager. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
-------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100

typedef struct {
    int id;
    char name[50];
    int age;
    float marks;
} Student;

Student students[MAX];
int count = 0;

void addStudent() {
    if (count >= MAX) {
        printf("Student list is full!\n");
        return;
    }
    printf("Enter ID: ");
    scanf("%d", &students[count].id);
    printf("Enter Name: ");
    scanf(" %[^\n]", students[count].name);
    printf("Enter Age: ");
    scanf("%d", &students[count].age);
    printf("Enter Marks: ");
    scanf("%f", &students[count].marks);
    count++;
    printf("Student added successfully!\n");
}

void viewStudents() {
    if (count == 0) {
        printf("No students to display.\n");
        return;
    }
    printf("\nID\tName\t\tAge\tMarks\n");
    for (int i = 0; i < count; i++) {
        printf("%d\t%s\t\t%d\t%.2f\n", students[i].id, students[i].name, students[i].age, students[i].marks);
    }
}

void searchStudent() {
    int id;
    printf("Enter ID to search: ");
    scanf("%d", &id);
    for (int i = 0; i < count; i++) {
        if (students[i].id == id) {
            printf("Student Found: %s, Age: %d, Marks: %.2f\n", students[i].name, students[i].age, students[i].marks);
            return;
        }
    }
    printf("Student not found.\n");
}

void deleteStudent() {
    int id, found = 0;
    printf("Enter ID to delete: ");
    scanf("%d", &id);
    for (int i = 0; i < count; i++) {
        if (students[i].id == id) {
            for (int j = i; j < count - 1; j++) {
                students[j] = students[j + 1];
            }
            count--;
            found = 1;
            printf("Student deleted successfully.\n");
            break;
        }
    }
    if (!found) {
        printf("Student not found.\n");
    }
}

int main() {
    int choice;
    while (1) {
        printf("\n--- Student Management System ---\n");
        printf("1. Add Student\n");
        printf("2. View Students\n");
        printf("3. Search Student\n");
        printf("4. Delete Student\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addStudent();
                break;
            case 2:
                viewStudents();
                break;
            case 3:
                searchStudent();
                break;
            case 4:
                deleteStudent();
                break;
            case 5:
                printf("Exiting program. Goodbye!\n");
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }
    return 0;
}
